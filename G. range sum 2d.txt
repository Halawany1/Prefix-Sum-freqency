//.....
//Believe in yourself ,( try and try and then try ), You can do it
#include <iostream>
#include <stdio.h>
#include<bits/stdc++.h>
#include <algorithm>
#include <iomanip>
#include <map>
#include <cmath>
#include <set>
#include<string>
#include <hash_map>
#include <vector>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include <deque>
#include <bitset>
#include<stack>
#define re return 0;
#define ll long long
#define PI  3.1415926535897932384626
#define mod (1000000000+7)
#define endl '\n'
 
#define MAX 10
#define mx_all(c)    *max_element((c).begin(), (c).end())
#define mn_all(c)    *min_element((c).begin(), (c).end())
#define all(c) (c).begin(), (c).end()
#define ull  unsigned long long
#define sonik ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define no cout << "NO" << '\n'
#define yes cout << "YES" << '\n'
using namespace std;
// letters = "abcdefghijklmnopqrstuvwxyz";
bool pp(ll n) {
    if (n <= 1)return false;
    if (n <= 3)return true;
    if (n % 2 == 0 || n % 3 == 0)return false;
    for (int i = 5; i * i <= n; i = i + 6)if (n % i == 0 || n % (i + 2) == 0)return false;
    return true; }
bool isPowerOfTwo(ll n) { if (n == 0)return false; return (ceil(log2(n)) == floor(log2(n))); }
bool isPerfectSquare(ull x) { if (x >= 0) { ull sr = sqrt(x); return (sr * sr == x); }return false; }
ll gcd(ll a,ll b){
    if(b==0){
        return a;
    }
    return gcd(b,a%b);
}
ll lcm(ll a,ll b){
    return (a*b)/ gcd(a,b);
}
long long factors(long long n){
    long long numoffactors = 0;
    for (long long i=1;i*i<=n;i++){
        if (n%i==0&&i*i==n){
            numoffactors++;
            break;
        }
        else if (n%i==0){
            numoffactors += 2;
        }
    }
    return numoffactors;
}
long long factorial(long long n){
    if (n>1)
        return n*factorial(n-1);
    else
        return 1;
}
void printPrimeFactors(int n) {
    while (n%2 == 0){
        cout<<"2\t";
        n = n/2;
    }
    for (int i = 3; i <= sqrt(n); i = i+2){
        while (n%i == 0){
            cout<<i<<"\t";
            n /= i;
        }
    }
    if (n > 2)
        cout<<n<<"\t";
}
 
 
int qq;
bool isPalindrome(string s)
{
    int len = s.size();
    for(int i=0;i<len/2;i++)
    {
        if(s[i] != s[len-i-1])
            qq++;
    }
}
bool isPrime(ll n)
{
    if (n <= 1)
        return false;
 
    for (ll i = 2; i*i <= n; i++)
        if (n % i == 0)
            return false;
 
    return true;
}
int factoriall(int x)
{
    if (x <= 1)
        return 1;
    int res = 2;
    for (int i = 3; i <= x; i++)
        res = res * i;
    return res;
}
 
int gcdOfFactorial(int m, int n)
{
    return factoriall(min(m, n));
}
//__builtin_popcount() -> to count the number of oneâ€™s(set bits) in an integer.
 
const int m=1e9+7;
 
int main() {
//freopen("lazy.in", "rt", stdin);
//freopen("girls.in", "wt", stdout);
    sonik
 
    ll N, M, Q;
    cin >> N >> M>>Q;
    ll A[N][M];
    for (int i = 0; i < N; i++)
        for (int j = 0; j < M; j++)
            cin >> A[i][j];
 
    ll pref[N][M];
    for (int i = 0; i < N ; i++){
        for (int j = 0; j < M; j++) {
            pref[i][j] = A[i][j];
            if (i > 0) pref[i][j] += pref[i-1][j];
            if (j > 0) pref[i][j] += pref[i][j-1];
            if (i > 0 && j > 0) pref[i][j] -= pref[i-1][j-1];
        }
    }
 
    while (Q--) {
        ll x1, y1, x2, y2 ;
        cin >> x1 >> y1 >> x2 >> y2;
        x1 --; y1--; x2--; y2--;
        ll sum = pref[x2][y2];
        if (y1 > 0) sum -= pref[x2][y1-1];
        if (x1 > 0) sum -= pref[x1-1][y2];
        if (x1 > 0 && y1 > 0) sum += pref[x1-1][y1-1];
 
        cout << sum <<endl;
    }
 
    re
}
 
 
 
 
 
