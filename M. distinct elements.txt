//    ios_base::sync_with_stdio(false);
//    cin.tie(NULL);
#include <iostream>
 
#include <bits/stdc++.h>
#define ll long long
using namespace std;
 
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
//ll x,y,z;
//cin>>x>>y>>z;
//ll a[x][y];ll pre[x][y];
//    for (int i = 0; i < x; ++i) {
//        for (int j = 0; j <y ; ++j) {
//            cin>>a[i][j];
//            if(!i&&!j){
//                pre[i][j]=a[i][j];
//            }else{
//                if(j==0){
//                    pre[i][j]=pre[i-1][y-1]+a[i][j];
//                }else {
//                    pre[i][j] = pre[i][j - 1] + a[i][j];
//                }
//            }
//        }
//    }
//    for (int i = 0; i <x ; ++i) {
//        for (int j = 0; j <y ; ++j) {
//            cout<<pre[i][j]<<' ';
//        }
//        cout<<endl;
//    }
//while(z--)
//{
//    ll g,h,l,r;
//    cin>>g>>h>>l>>r;
//
//        cout << pre[h - 1][r - 1] - pre[g - 1][l - 1] << endl;
//
//}
ll x,y;
cin>>x>>y;
vector<ll>v(x),a;
map<ll,ll>mp;
    for (int i = 0; i < x; ++i) {
        cin>>v[i];
        if(!mp[v[i]]){
            a.push_back(v[i]);
        }
        mp[v[i]]++;
    }
    sort(a.begin(),a.end());
    while(y--){
        ll q;
        cin>>q;
        auto it= lower_bound(a.begin(),a.end(),q)-a.begin();
        if(mp[q]) {
            cout << it << ' ' << a.size() - it - 1 << endl;
        }else{
            cout << it << ' ' << a.size() - it << endl;
        }
    }
    return 0;
}
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
/*string num_str;
int queries, l, r;
 
cin >> num_str;
cin >> queries;
 
vector<long long> pre_sum(num_str.size(), 0);
 
pre_sum.at(0) = num_str.at(0) - 48;
 
for (int i = 1; i < num_str.size(); ++i) {
pre_sum.at(i) = pre_sum.at(i - 1) + (num_str.at(i) - 48);
}
//    for (auto item:pre_sum) {
//        cout<<item<<"  ";
//    }
for (int i = 0; i < queries; ++i) {
cin >> l >> r;
if (l != 1){
cout << (pre_sum.at(r - 1) - pre_sum.at(l - 2)) << endl;
} else{
cout << (pre_sum.at(r - 1)) << endl;
}
}*/
 
 
/*int main() {
//    ios_base::sync_with_stdio(false);
//    cin.tie(NULL);
    long long size;
    string s;
    long long q;
    cin >> size >> q;
    cin >> s;
    vector<long long> freq(s.length() + 3, 0), prefixSum(s.length() + 3, 0);
    for (int i = 1; i <= s.length(); ++i) {
        if (s[i - 1] == 'X')
            freq[i] = 1;
    }
    for (int i = 1; i <= s.length(); ++i) {
        prefixSum[i] = prefixSum[i - 1] + freq[i];
    }
    long long l, r;
    for (int i = 0; i < q; ++i) {
        cin >> l >> r;
        cout << prefixSum[r] - prefixSum[l - 1] << "\n";
    }
    return 0;
}*/
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
//Partial Sum, Prefix Sum, Frequency Array
 
//A. Count numbers
/*int main() {
    int n{}, q{};
    cin >> n >> q; // n = max integer & the size of the array, q = number of iterations
    vector<int> freqArr(n + 1, 0);
    int z{}, x{};
    for (int i = 0; i < q; ++i) {
        cin >> z >> x;
        if (z == 1)
            freqArr[x]++;
        else
            cout << freqArr[x] << endl;
    }
    system("pause");
    return 0;
}*/
 
//B. Count characters
/*int main() {
    string word;
    cin >> word;
    vector<int> freq(123, 0);
    for (char i: word) {
        int a = i;
        freq[a]++;
    }
    std::sort(word.begin(), word.end());
    word.erase(std::unique(word.begin(), word.end()), word.end());
    for (char i: word) {
        int a = i;
        cout << i << " " << freq[a] << endl;
    }
    system("pause");
    return 0;
}*/
 
//C. Sort the array
/*int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n;
    cin >> n;
    vector<int> a(n,0);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    sort(a.begin(), a.end());
    for (int i = 0; i < n; i++) {
        cout << a[i] << " ";
    }
//    cout << endl;
//    system("pause");
    return 0;
}*/
 
//D. The first missing number
/*int main() {
    int m, n; //n = number of entries in the array, m = bound of the array -m to m
    cin >> n >> m;
    int x = 2 * m;
    vector<int> a(x + 1);
    for (int i = 0; i < n; i++) {
        int x;
        cin >> x;
        a[x + m]++;
    }
    for (int i = 0; i < x; ++i)
        if (a[i] == 0) {
            cout << i - m;
            return 0;
        }
    return 0;
}*/
 
//E. Range sum query
/*int main() {
    int n{}, q{};
    cin >> n >> q;
    vector<long long> a(n + 1, 0), prefixSum(n + 1, 0);
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
        prefixSum[i] = prefixSum[i - 1] + a[i];
    }
    for (int i = 0; i < q; ++i) {
        int l{}, r{};
        cin >> l >> r;
        cout << prefixSum[r] - prefixSum[l - 1] << endl;
    }
    system("pause");
    return 0;
}*/
 
//F. Update range
/*int main() {
//  ios_base::sync_with_stdio(false);
//  cin.tie(NULL);
//  When u use it the output will not appear in the console
    int n{}, q{};
    cin >> n >> q;
    vector<long long> arr(n + 4, 0), partialSum(n + 4, 0), prefixSum(n + 4, 0);
    for (int i = 1; i <= n; ++i) {
        cin >> arr[i];
    }
    long long l{}, r{}, val;
    for (int i = 1; i <= q; ++i) {
        cin >> l >> r >> val;
        partialSum[l] += val;
        partialSum[r + 1] -= val;
    }
    for (int i = 1; i <= n; ++i) {
        prefixSum[i] = prefixSum[i - 1] + partialSum[i];
    }
    for (int i = 1; i <= n; ++i) {
        arr[i]+= prefixSum[i];
    }
    for (int i = 1; i <= n; ++i) {
        cout << arr[i] << " ";
    }
    system("pause");
    return 0;
}*/
 
 
//G. Count a's
/*int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    string s;
    int q;
    cin >> s >> q;
    vector<int> freq(s.length() + 1, 0), prefixSum(s.length() + 1, 0);
    for (int i = 1; i <= s.length(); ++i) {
        if (s[i - 1] == 'a')
            freq[i] = 1;
    }
    for (int i = 1; i <= s.length(); ++i) {
        prefixSum[i] = prefixSum[i - 1] + freq[i];
    }
    int l, r;
    for (int i = 0; i < q; ++i) {
        cin >> l >> r;
        cout << prefixSum[r] - prefixSum[l-1] << "\n";
    }
    system("pause");
    return 0;
}*/
 
//H. Max character
/*
int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    string s;
    cin>>s;
    vector <int> freq(300,0);
    for (int i = 0; i < s.size(); ++i) {
        int charVal=s[i];
        freq[charVal]++;
    }
    int max{freq[0]};
    for (int i = 1; i < freq.size(); ++i) {
        if (freq[i]>max)
            max = freq[i];
    }
    cout<<max<<"\n";
    return 0;
}*/
 
//J. Palindrome 1
/*int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    string s;
    cin >> s;
    vector<int> freq(27, 0);
    for (int i = 0; i < s.size(); ++i) {
        int val = s[i]-97;
        freq[val]++; //the value of the number 0 character is 48
    }
    int odd{};
    for (int i = 0; i < freq.size(); ++i) {
        if (freq[i] % 2 != 0) {
            if(odd==0)
                odd++;
            else{
                cout<<"NO\n";
                return 0;
            }
        }
    }
    cout << "YES\n";
    return 0;
}*/
 
//M. Just Sort This String
/*
//Idea of the solution https://media.geeksforgeeks.org/wp-content/cdn-uploads/20190702110104/RelativeSorting.png
#include <bits/stdc++.h>
using namespace std;
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    string sorted, str, str_sorted{};
    cin >> sorted;
    cin >> str;
    string temp{str};
    vector<int> freq(26, 0);
//    sort(temp.begin(), temp.end());
//    cout<<str<<"  "<<temp;
 
    for (int i = 0; i < str.size(); ++i) {
        freq.at(str.at(i) - 97)++;
    }
 
//    everything is fine till that part
//    cout<<freq.at('q'-97)<<endl;
 
    int z{};
    for (int i = 0; i < sorted.size(); ++i) {
        char c{sorted.at(i)};
        int frq{freq[c - 97]};
        if (frq > 0) {
            for (int j = 0; j < frq; ++j) {
                str_sorted.push_back(c);
                z++;
            }
        }
    }
    cout << "\n\n" << str_sorted << "\n\n";
    return 0;
}*/
 
 
 
 
//--------------------------------------------------------------------------
/*int main() {
    vector x(13, 0);
    x = {1, 2, 8, 4, 2, 6, 7, 8, 2, 13, 11, 12, 13};
    std::sort(x.begin(), x.end());
    x.erase(std::unique(x.begin(), x.end()), x.end());
    //print x
    for (int i = 0; i < x.size(); i++) {
        cout << x[i] << " ";
    }
    system("pause");
    return 0;
}*/
 
/*
int main() {
    // vector <int> x;
    // x.push_back(6);
    // x.push_back(2);
    // x.push_back(5);
    // x.push_back(4);
    // x.push_back(3);
    // x.push_back(1);
    // x.push_back(9);
    // int num;
    int k, u;
    cin >> k >> u;
 
    vector<vector<int>> y(k, vector<int>(u, 6));
    // cin>>num;
    // x.push_back(num);
    // sort(x.rbegin(),x.rend());
    cout << endl << endl;
    for (int i = 0; i < k; i++) {
        for (int j = 0; j < u; j++) {
            cout << y[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;
    system("pause");
    return 0;
}*/